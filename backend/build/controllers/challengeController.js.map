{"version":3,"sources":["../../src/controllers/challengeController.js"],"names":["PrismaClient","pkg","prisma","getAllChallenges","req","res","next","challenge","findMany","challenges","json","getChallenge","challengePath","params","findUnique","where","path","create","body","tite","desc","id","user","challege","data","author","connect","challengeRecord"],"mappings":";;;;;;;;;;;;;AACA;;AADA;AAEA,IAAQA,YAAR,GAAyBC,kBAAzB,CAAQD,YAAR;AAEA,IAAME,MAAM,GAAG,IAAIF,YAAJ,EAAf;AAEA;;AAEO,IAAMG,gBAAgB;AAAA,2FAAG,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACLJ,MAAM,CAACK,SAAP,CAAiBC,QAAjB,CAA0B,EAA1B,CADK;;AAAA;AACxBC,YAAAA,UADwB;AAAA,6CAGvBJ,GAAG,CAACK,IAAJ,CAASD,UAAT,CAHuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBN,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;;;AAMA,IAAMQ,YAAY;AAAA,4FAAG,kBAAOP,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBM,YAAAA,aADkB,GACAR,GAAG,CAACS,MADJ,CAClBD,aADkB;AAAA;AAAA,mBAGFV,MAAM,CAACK,SAAP,CAAiBO,UAAjB,CAA4B;AAClDC,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,IAAI,EAAEJ;AAAR;AAD2C,aAA5B,CAHE;;AAAA;AAGpBL,YAAAA,SAHoB;AAAA,8CAOnBF,GAAG,CAACK,IAAJ,CAASH,SAAT,CAPmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZI,YAAY;AAAA;AAAA;AAAA,GAAlB;AAUP;;;;;AAEO,IAAMM,MAAM;AAAA,4FAAG,kBAAOb,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACGF,GAAG,CAACc,IADP,EACZC,IADY,aACZA,IADY,EACNC,IADM,aACNA,IADM;AAEZC,YAAAA,EAFY,GAELjB,GAAG,CAACkB,IAAJ,CAASA,IAFJ,CAEZD,EAFY;AAAA;AAAA,mBAIUnB,MAAM,CAACqB,QAAP,CAAgBN,MAAhB,CAAuB;AACnDO,cAAAA,IAAI,EAAE;AAAEL,gBAAAA,IAAI,EAAJA,IAAF;AAAQC,gBAAAA,IAAI,EAAJA,IAAR;AAAcK,gBAAAA,MAAM,EAAE;AAAEC,kBAAAA,OAAO,EAAE;AAAEL,oBAAAA,EAAE,EAAFA;AAAF;AAAX;AAAtB;AAD6C,aAAvB,CAJV;;AAAA;AAIdM,YAAAA,eAJc;AAAA,8CAQbtB,GAAG,CAACK,IAAJ,CAASiB,eAAT,CARa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANV,MAAM;AAAA;AAAA;AAAA,GAAZ","sourcesContent":["// import { PrismaClient } from '@prisma/client';\r\nimport pkg from '@prisma/client';\r\nconst { PrismaClient } = pkg;\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n/* GET */\r\n\r\nexport const getAllChallenges = async (req, res, next) => {\r\n  const challenges = await prisma.challenge.findMany({});\r\n\r\n  return res.json(challenges);\r\n};\r\n\r\nexport const getChallenge = async (req, res, next) => {\r\n  const { challengePath } = req.params;\r\n\r\n  const challenge = await prisma.challenge.findUnique({\r\n    where: { path: challengePath }\r\n  });\r\n\r\n  return res.json(challenge);\r\n};\r\n\r\n/* POST */\r\n\r\nexport const create = async (req, res, next) => {\r\n  const { tite, desc } = req.body;\r\n  const { id } = req.user.user;\r\n\r\n  const challengeRecord = await prisma.challege.create({\r\n    data: { tite, desc, author: { connect: { id } } }\r\n  });\r\n\r\n  return res.json(challengeRecord);\r\n};\r\n"],"file":"challengeController.js"}
{"version":3,"sources":["../../src/services/discordService.js"],"names":["prisma","PrismaClient","oauthSignup","DiscordOauth2","clientId","process","env","DISCORD_CLIENT_ID","clientSecret","DISCORD_SECRET","redirectUri","BASE_URL","oauthLogin","signup","res","code","tokenRequest","scope","grantType","tokenResponse","console","log","getUser","access_token","discordUser","status","json","error","user","username","email","hasDiscordLogin","create","data","userRecord","userClientData","authService","userClientCleaner","jwtData","id","jwt","generateJWT","login","findUnique","where"],"mappings":"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","sourcesContent":["import { PrismaClient } from '@prisma/client';\r\nimport DiscordOauth2 from 'discord-oauth2';\r\nimport * as authService from './authService';\r\n// import * as emailHandler from '../handlers/emailHandler';\r\nimport { BASE_URL } from '../config';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const oauthSignup = new DiscordOauth2({\r\n  clientId: process.env.DISCORD_CLIENT_ID,\r\n  clientSecret: process.env.DISCORD_SECRET,\r\n  redirectUri: `${BASE_URL}/signup-discord`\r\n});\r\n\r\nexport const oauthLogin = new DiscordOauth2({\r\n  clientId: process.env.DISCORD_CLIENT_ID,\r\n  clientSecret: process.env.DISCORD_SECRET,\r\n  redirectUri: `${BASE_URL}/login-discord`\r\n});\r\n\r\nexport const signup = async (res, code) => {\r\n  let tokenResponse;\r\n\r\n  try {\r\n    tokenResponse = await oauthSignup.tokenRequest({\r\n      code,\r\n      scope: 'identify email',\r\n      grantType: 'authorization_code'\r\n    });\r\n  } catch (error) {\r\n    console.log('signup error: ', error);\r\n  }\r\n\r\n  const discordUser = await oauthSignup.getUser(tokenResponse.access_token);\r\n\r\n  if (!discordUser)\r\n    return res.status(401).json({ error: 'user.notFoundDiscord' });\r\n\r\n  const user = {\r\n    username: discordUser.username,\r\n    email: discordUser.email,\r\n    hasDiscordLogin: true\r\n  };\r\n\r\n  const userRecord = await prisma.user.create({ data: user });\r\n\r\n  const userClientData = authService.userClientCleaner(userRecord);\r\n\r\n  // emailHandler.sendEmailSignup(userClientData.username, userClientData.email);\r\n\r\n  const jwtData = { user: { id: userClientData.id } };\r\n\r\n  const jwt = authService.generateJWT(jwtData);\r\n\r\n  return { jwt, user: userClientData };\r\n};\r\n\r\nexport const login = async (res, code) => {\r\n  const tokenResponse = await oauthLogin.tokenRequest({\r\n    code,\r\n    scope: 'identify email',\r\n    grantType: 'authorization_code'\r\n  });\r\n\r\n  const discordUser = await oauthLogin.getUser(tokenResponse.access_token);\r\n\r\n  if (!discordUser)\r\n    return res.status(401).json({ error: 'user.notFoundDiscord' });\r\n\r\n  const userRecord = await prisma.user.findUnique({\r\n    where: { email: discordUser.email }\r\n  });\r\n\r\n  if (!userRecord)\r\n    return res.status(401).json({ error: 'user.notFoundDiscord' });\r\n\r\n  const userClientData = authService.userClientCleaner(userRecord);\r\n\r\n  const jwtData = { user: { id: userClientData.id } };\r\n\r\n  const jwt = authService.generateJWT(jwtData);\r\n\r\n  return { jwt, user: userClientData };\r\n};\r\n"],"file":"discordService.js"}
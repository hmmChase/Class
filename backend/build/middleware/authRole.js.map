{"version":3,"sources":["../../src/middleware/authRole.js"],"names":["prisma","PrismaClient","requiredRoles","req","res","next","user","jwt","verify","cookies","Buffer","from","process","env","ACCESS_TOKEN_SECRET","findUnique","where","id","userRecord","role","status","json","error","isCorrectRole","userRole","includes"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,MAAM,GAAG,IAAIC,oBAAJ,EAAf;;eAEe,kBAAAC,aAAa;AAAA;AAAA,6FAAI,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,cAAAA,IADwB,GACjBC,yBAAIC,MAAJ,CACXL,GAAG,CAACM,OAAJ,CAAYF,GADD,EAEXG,MAAM,CAACC,IAAP,CAAYC,OAAO,CAACC,GAAR,CAAYC,mBAAxB,EAA6C,QAA7C,CAFW,CADiB;AAAA;AAAA,qBAMLd,MAAM,CAACM,IAAP,CAAYS,UAAZ,CAAuB;AAC9CC,gBAAAA,KAAK,EAAE;AAAEC,kBAAAA,EAAE,EAAEX,IAAI,CAACA,IAAL,CAAUW;AAAhB;AADuC,eAAvB,CANK;;AAAA;AAMxBC,cAAAA,UANwB;AAUtBC,cAAAA,IAVsB,GAUbD,UAVa,CAUtBC,IAVsB;;AAAA,kBAYzBD,UAZyB;AAAA;AAAA;AAAA;;AAAA,+CAarBE,MAAM,CAAC,GAAD,CAAN,CAAYC,IAAZ,CAAiB;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eAAjB,CAbqB;;AAAA;AAAA,oBAcnB,CAAC,CAACpB,aAAF,IAAmB,CAACqB,aAAa,CAACrB,aAAD,EAAgBiB,IAAhB,CAdd;AAAA;AAAA;AAAA;;AAAA,+CAerBC,MAAM,CAAC,GAAD,CAAN,CAAYC,IAAZ,CAAiB;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eAAjB,CAfqB;;AAAA;AAAA,+CAiBrBjB,IAAI,EAjBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA,C;;;;AAqB5B,IAAMkB,aAAa,GAAG,SAAhBA,aAAgB,CAACrB,aAAD,EAAgBsB,QAAhB,EAA6B;AACjD,MAAI,OAAOtB,aAAP,KAAyB,QAA7B,EAAuC,OAAOsB,QAAQ,KAAKtB,aAApB,CAAvC,KACK,OAAOA,aAAa,CAACuB,QAAd,CAAuBD,QAAvB,CAAP;AACN,CAHD","sourcesContent":["import { PrismaClient } from '@prisma/client';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport default requiredRoles => async (req, res, next) => {\r\n  const user = jwt.verify(\r\n    req.cookies.jwt,\r\n    Buffer.from(process.env.ACCESS_TOKEN_SECRET, 'base64')\r\n  );\r\n\r\n  const userRecord = await prisma.user.findUnique({\r\n    where: { id: user.user.id }\r\n  });\r\n\r\n  const { role } = userRecord;\r\n\r\n  if (!userRecord) {\r\n    return status(404).json({ error: 'user.notFound' });\r\n  } else if (!!requiredRoles && !isCorrectRole(requiredRoles, role)) {\r\n    return status(403).json({ error: 'user.unauthorized' });\r\n  } else {\r\n    return next();\r\n  }\r\n};\r\n\r\nconst isCorrectRole = (requiredRoles, userRole) => {\r\n  if (typeof requiredRoles === 'string') return userRole === requiredRoles;\r\n  else return requiredRoles.includes(userRole);\r\n};\r\n"],"file":"authRole.js"}
{"version":3,"sources":["../../src/controllers/discordController.js"],"names":["getSignupUrl","req","res","scope","state","crypto","randomBytes","toString","url","discordService","oauthSignup","generateAuthUrl","cookie","COOKIE_CONFIG","json","getLoginUrl","oauthLogin","signupDiscord","body","code","previousState","authService","getStateFromHeader","status","error","signup","jwt","user","loginDiscord","login"],"mappings":"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","sourcesContent":["import crypto from 'crypto';\r\nimport * as authService from '../services/authService.js';\r\nimport * as discordService from '../services/discordService.js';\r\nimport { COOKIE_CONFIG } from '../config.js';\r\n\r\nexport const getSignupUrl = (req, res) => {\r\n  const scope = ['identify', 'email'];\r\n  const state = crypto.randomBytes(16).toString('hex');\r\n\r\n  const url = discordService.oauthSignup.generateAuthUrl({ scope, state });\r\n\r\n  res.cookie('state', state, COOKIE_CONFIG);\r\n\r\n  return res.json(url);\r\n};\r\n\r\nexport const getLoginUrl = (req, res) => {\r\n  const scope = ['identify', 'email'];\r\n  const state = crypto.randomBytes(16).toString('hex');\r\n\r\n  const url = discordService.oauthLogin.generateAuthUrl({ scope, state });\r\n\r\n  res.cookie('state', state, COOKIE_CONFIG);\r\n\r\n  return res.json(url);\r\n};\r\n\r\nexport const signupDiscord = async (req, res) => {\r\n  const { code, state } = req.body;\r\n\r\n  const previousState = authService.getStateFromHeader(req);\r\n\r\n  if (state !== previousState)\r\n    return res.status(401).json({ error: 'login.discordError' });\r\n\r\n  const { jwt, user } = await discordService.signup(res, code);\r\n\r\n  res.cookie('jwt', jwt, COOKIE_CONFIG);\r\n\r\n  return res.json(user);\r\n};\r\n\r\nexport const loginDiscord = async (req, res) => {\r\n  const { code, state } = req.body;\r\n\r\n  const previousState = authService.getStateFromHeader(req);\r\n\r\n  if (state !== previousState)\r\n    return res.status(401).json({ error: 'login.discordError' });\r\n\r\n  const { user, jwt } = await discordService.login(res, code);\r\n\r\n  res.cookie('jwt', jwt, COOKIE_CONFIG);\r\n\r\n  return res.json(user);\r\n};\r\n"],"file":"discordController.js"}
{"version":3,"sources":["../../src/controllers/questionController.js"],"names":["PrismaClient","pkg","prisma","getAllQuestions","req","res","next","question","findMany","questionRecords","json","getQuestion","questionId","params","findUnique","where","id","parseInt","include","author","questionRecord","getChallengeQuestions","challengePath","challenge","path","deletedAt","comments","orderBy","questions","create","body","title","user","jwt","verify","cookies","Buffer","from","process","env","ACCESS_TOKEN_SECRET","data","connect","console","log","deleteSoft","update","Date","toISOString","updatedQuestions"],"mappings":"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","sourcesContent":["// import { PrismaClient } from '@prisma/client';\r\nimport pkg from '@prisma/client';\r\nconst { PrismaClient } = pkg;\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n/* GET */\r\n\r\nexport const getAllQuestions = async (req, res, next) => {\r\n  const questionRecords = await prisma.question.findMany({});\r\n\r\n  return res.json(questionRecords);\r\n};\r\n\r\nexport const getQuestion = async (req, res, next) => {\r\n  const { questionId } = req.params;\r\n\r\n  const questionRecord = await prisma.question.findUnique({\r\n    where: { id: parseInt(questionId) },\r\n    include: { author: true }\r\n  });\r\n\r\n  return res.json(questionRecord);\r\n};\r\n\r\nexport const getChallengeQuestions = async (req, res, next) => {\r\n  const { challengePath } = req.params;\r\n\r\n  const questions = await prisma.question.findMany({\r\n    where: { challenge: { path: challengePath }, deletedAt: null },\r\n    include: { author: true, comments: { where: { deletedAt: null } } },\r\n    orderBy: { id: 'desc' }\r\n  });\r\n\r\n  return res.json(questions);\r\n};\r\n\r\n/* POST */\r\n\r\nexport const create = async (req, res, next) => {\r\n  const { title, body } = req.body;\r\n\r\n  const { challengePath } = req.params;\r\n\r\n  const user = jwt.verify(\r\n    req.cookies.jwt,\r\n    Buffer.from(process.env.ACCESS_TOKEN_SECRET, 'base64')\r\n  );\r\n\r\n  const questionRecord = await prisma.question.create({\r\n    data: {\r\n      title,\r\n      body,\r\n      author: { connect: { id: user.user.id } },\r\n      challenge: { connect: { path: challengePath } }\r\n    },\r\n    include: { author: true, comments: { where: { deletedAt: null } } }\r\n  });\r\n\r\n  console.log('questionRecord:', questionRecord);\r\n\r\n  return res.json(questionRecord);\r\n};\r\n\r\nexport const deleteSoft = async (req, res, next) => {\r\n  const { challengePath, questionId } = req.body;\r\n\r\n  console.log('questionId:', questionId);\r\n\r\n  await prisma.question.update({\r\n    where: { id: parseInt(questionId) },\r\n    data: { deletedAt: new Date().toISOString() }\r\n  });\r\n\r\n  const updatedQuestions = await prisma.question.findMany({\r\n    where: { challenge: { path: challengePath }, deletedAt: null },\r\n    include: { author: true, comments: { where: { deletedAt: null } } },\r\n    orderBy: { id: 'desc' }\r\n  });\r\n\r\n  return res.json(updatedQuestions);\r\n};\r\n\r\n/* PATCH */\r\n\r\nexport const update = async (req, res, next) => {\r\n  const { challengePath, title, body, id } = req.body;\r\n\r\n  await prisma.question.update({ where: { id }, data: { title, body } });\r\n\r\n  const updatedQuestions = await prisma.question.findMany({\r\n    where: { challenge: { path: challengePath }, deletedAt: null },\r\n    include: { author: true, comments: { where: { deletedAt: null } } },\r\n    orderBy: { id: 'desc' }\r\n  });\r\n\r\n  return res.json(updatedQuestions);\r\n};\r\n"],"file":"questionController.js"}
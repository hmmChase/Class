{"version":3,"sources":["../src/index.js"],"names":["app","set","whitelist","corsOptions","origin","callback","indexOf","Error","credentials","use","morganLogStyle","get","logger","stream","write","message","info","express","json","urlencoded","extended","bodyParser","indexRouter","v1","Router","userRouter","discordRouter","challengeRouter","projectRouter","questionRouter","commentRouter","CustomError","notFound","developmentErrors","productionErrors","listen","port","err","console","log"],"mappings":"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","sourcesContent":["import express from 'express';\r\nimport morgan from 'morgan';\r\nimport cors from 'cors';\r\nimport bodyParser from 'body-parser';\r\nimport cookieParser from 'cookie-parser';\r\nimport compression from 'compression';\r\nimport helmet from 'helmet';\r\nimport 'dotenv/config';\r\n\r\nimport indexRouter from './routes/index';\r\nimport userRouter from './routes/user';\r\nimport discordRouter from './routes/discord';\r\nimport challengeRouter from './routes/challenge';\r\nimport projectRouter from './routes/project';\r\nimport questionRouter from './routes/question';\r\nimport commentRouter from './routes/comment';\r\n\r\nimport {\r\n  handleErrors,\r\n  notFound,\r\n  developmentErrors,\r\n  productionErrors,\r\n  CustomError\r\n} from './handlers/errorHandler';\r\nimport logger from './handlers/logHandler';\r\nimport { port } from './config';\r\n\r\nconst app = express();\r\n\r\napp.set('view engine', 'ejs');\r\n\r\nconst whitelist = [\r\n  'http://localhost:3000',\r\n  'http://localhost:4000',\r\n  'https://challenge-board.vercel.app'\r\n];\r\n\r\nconst corsOptions = {\r\n  origin: (origin, callback) => {\r\n    if (whitelist.indexOf(origin) !== -1) callback(null, true);\r\n    else callback(new Error('Not allowed by CORS'));\r\n  },\r\n  credentials: true\r\n};\r\n\r\napp.use(cors(corsOptions));\r\n\r\nconst morganLogStyle = app.get('env') === 'development' ? 'dev' : 'combined';\r\n\r\nlogger.stream = { write: message => logger.info(message) };\r\n\r\napp.use(morgan(morganLogStyle, { stream: logger.stream }));\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\napp.use(bodyParser.json());\r\napp.use(cookieParser());\r\napp.use(compression());\r\napp.use(helmet());\r\n\r\napp.use('/', indexRouter);\r\napp.use('/api', indexRouter);\r\n\r\nconst v1 = express.Router();\r\napp.use('/api/v1', v1);\r\n\r\nv1.use('/', indexRouter);\r\nv1.use('/user', userRouter);\r\nv1.use('/discord', discordRouter);\r\nv1.use('/challenge', challengeRouter);\r\nv1.use('/project', projectRouter);\r\nv1.use('/question', questionRouter);\r\nv1.use('/comment', commentRouter);\r\n\r\napp.get(\r\n  '/error',\r\n  handleErrors(() => {\r\n    throw new CustomError('This is a custom mock error.', 'mockError', 401);\r\n  })\r\n);\r\n\r\napp.use(notFound);\r\n\r\nif (app.get('env') === 'development') app.use(developmentErrors);\r\nelse app.use(productionErrors);\r\n\r\n// app.use(function (err, req, res, next) {\r\n//   logger.error(\r\n//     `${req.method} - ${err.message}  - ${req.originalUrl} - ${req.ip}`\r\n//   );\r\n//   next(err);\r\n// });\r\n\r\n// // Default Error Handler\r\n// app.use((err, req, res, next) => {\r\n//   winstom.error('Internal Server Error');\r\n\r\n//   res.status(500).send('500. Internal Server Error');\r\n\r\n//   next();\r\n// });\r\n\r\n// export default app;\r\n\r\napp.listen({ port: port || 4000 }, err => {\r\n  if (err) throw err;\r\n\r\n  console.log(`Server ready at http://localhost:${port}/api/v1/`);\r\n});\r\n"],"file":"index.js"}
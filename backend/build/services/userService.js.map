{"version":3,"sources":["../../src/services/userService.js"],"names":["prisma","PrismaClient","signupUserByEmail","res","username","email","password","emailNormalized","trim","toLowerCase","usernameNormalized","bcryptjs","hash","passwordHashed","user","create","data","createdUser","emailHandler","sendEmailSignup","resetPasswordLogin","findUnique","where","userRecord","status","json","error","compare","isCorrectPass","userJWT","id","newJWT","authService","generateJWT","userClientData","userClientCleaner"],"mappings":";;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;;;AAHA;AAKA,IAAMA,MAAM,GAAG,IAAIC,oBAAJ,EAAf;;AAEO,IAAMC,iBAAiB;AAAA,2FAAG,iBAAOC,GAAP,EAAYC,QAAZ,EAAsBC,KAAtB,EAA6BC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBC,YAAAA,eADyB,GACPF,KAAK,CAACG,IAAN,GAAaC,WAAb,EADO;AAEzBC,YAAAA,kBAFyB,GAEJN,QAAQ,CAACI,IAAT,EAFI,EAG/B;;AAH+B;AAAA,mBAIFG,qBAASC,IAAT,CAAcN,QAAd,CAJE;;AAAA;AAIzBO,YAAAA,cAJyB;AAM/B;AAEMC,YAAAA,IARyB,GAQlB;AACXV,cAAAA,QAAQ,EAAEM,kBADC;AAEXL,cAAAA,KAAK,EAAEE,eAFI;AAGXD,cAAAA,QAAQ,EAAEO;AAHC,aARkB;AAAA;AAAA,mBAcLb,MAAM,CAACc,IAAP,CAAYC,MAAZ,CAAmB;AAAEC,cAAAA,IAAI,EAAEF;AAAR,aAAnB,CAdK;;AAAA;AAczBG,YAAAA,WAdyB;AAgB/BC,YAAAA,YAAY,CAACC,eAAb,CAA6BT,kBAA7B,EAAiDH,eAAjD;AAhB+B,6CAkBxBU,WAlBwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBf,iBAAiB;AAAA;AAAA;AAAA,GAAvB;;;;AAqBA,IAAMkB,kBAAkB;AAAA,4FAAG,kBAAOjB,GAAP,EAAYE,KAAZ,EAAmBC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACPN,MAAM,CAACc,IAAP,CAAYO,UAAZ,CAAuB;AAAEC,cAAAA,KAAK,EAAE;AAAEjB,gBAAAA,KAAK,EAALA;AAAF;AAAT,aAAvB,CADO;;AAAA;AAC1BkB,YAAAA,UAD0B;;AAAA,gBAG3BA,UAH2B;AAAA;AAAA;AAAA;;AAAA,8CAIvBpB,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAArB,CAJuB;;AAAA;AAAA;AAAA,mBAOJf,qBAASgB,OAAT,CAAiBJ,UAAU,CAACjB,QAA5B,EAAsCA,QAAtC,CAPI;;AAAA;AAO1BsB,YAAAA,aAP0B;;AAAA,gBAS3BA,aAT2B;AAAA;AAAA;AAAA;;AAAA,8CAUvBzB,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAArB,CAVuB;;AAAA;AAY1BG,YAAAA,OAZ0B,GAYhB;AAAEf,cAAAA,IAAI,EAAE;AAAEgB,gBAAAA,EAAE,EAAEP,UAAU,CAACO;AAAjB;AAAR,aAZgB;AAc1BC,YAAAA,MAd0B,GAcjBC,WAAW,CAACC,WAAZ,CAAwBJ,OAAxB,CAdiB;AAgB1BK,YAAAA,cAhB0B,GAgBTF,WAAW,CAACG,iBAAZ,CAA8BZ,UAA9B,CAhBS;AAAA,8CAkBzB,CAACQ,MAAD,EAASG,cAAT,CAlByB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBd,kBAAkB;AAAA;AAAA;AAAA,GAAxB","sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n// import argon2 from 'argon2';\r\nimport bcryptjs from 'bcryptjs';\r\nimport * as emailHandler from '../handlers/emailHandler';\r\nimport * as authService from '../services/authService';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const signupUserByEmail = async (res, username, email, password) => {\r\n  const emailNormalized = email.trim().toLowerCase();\r\n  const usernameNormalized = username.trim();\r\n  // const passwordHashed = await argon2.hash(password);\r\n  const passwordHashed = await bcryptjs.hash(password);\r\n\r\n  // authService.validateEmail(res, emailNormalized);\r\n\r\n  const user = {\r\n    username: usernameNormalized,\r\n    email: emailNormalized,\r\n    password: passwordHashed\r\n  };\r\n\r\n  const createdUser = await prisma.user.create({ data: user });\r\n\r\n  emailHandler.sendEmailSignup(usernameNormalized, emailNormalized);\r\n\r\n  return createdUser;\r\n};\r\n\r\nexport const resetPasswordLogin = async (res, email, password) => {\r\n  const userRecord = await prisma.user.findUnique({ where: { email } });\r\n\r\n  if (!userRecord)\r\n    return res.status(401).json({ error: 'login.invalidCredentials' });\r\n\r\n  // const isCorrectPass = await argon2.verify(userRecord.password, password);\r\n  const isCorrectPass = await bcryptjs.compare(userRecord.password, password);\r\n\r\n  if (!isCorrectPass)\r\n    return res.status(401).json({ error: 'login.invalidCredentials' });\r\n\r\n  const userJWT = { user: { id: userRecord.id } };\r\n\r\n  const newJWT = authService.generateJWT(userJWT);\r\n\r\n  const userClientData = authService.userClientCleaner(userRecord);\r\n\r\n  return [newJWT, userClientData];\r\n};\r\n"],"file":"userService.js"}
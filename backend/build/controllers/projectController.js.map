{"version":3,"sources":["../../src/controllers/projectController.js"],"names":["prisma","PrismaClient","getAllProjects","req","res","next","project","findMany","orderBy","id","include","author","projectRecords","json","getChallengeProjects","challengePath","params","console","log","where","challenge","path","deletedAt","projects","create","body","githubLink","additionalLink","comments","user","jwt","verify","cookies","Buffer","from","process","env","ACCESS_TOKEN_SECRET","data","connect","projectRecord"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,MAAM,GAAG,IAAIC,oBAAJ,EAAf;AAEA;;AAEO,IAAMC,cAAc;AAAA,2FAAG,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACCL,MAAM,CAACM,OAAP,CAAeC,QAAf,CAAwB;AACnDC,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAD0C;AAEnDC,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,MAAM,EAAE;AAAV;AAF0C,aAAxB,CADD;;AAAA;AACtBC,YAAAA,cADsB;AAAA,6CAMrBR,GAAG,CAACS,IAAJ,CAASD,cAAT,CANqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdV,cAAc;AAAA;AAAA;AAAA,GAApB;;;;AASA,IAAMY,oBAAoB;AAAA,4FAAG,kBAAOX,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BU,YAAAA,aAD0B,GACRZ,GAAG,CAACa,MADI,CAC1BD,aAD0B;AAElCE,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,aAA9B;AAFkC;AAAA,mBAIXf,MAAM,CAACM,OAAP,CAAeC,QAAf,CAAwB;AAC7CY,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,SAAS,EAAE;AAAEC,kBAAAA,IAAI,EAAEN;AAAR,iBAAb;AAAsCO,gBAAAA,SAAS,EAAE;AAAjD,eADsC;AAE7CZ,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,MAAM,EAAE;AAAV,eAFoC;AAG7CH,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,EAAE,EAAE;AAAN;AAHoC,aAAxB,CAJW;;AAAA;AAI5Bc,YAAAA,QAJ4B;AAAA,8CAU3BnB,GAAG,CAACS,IAAJ,CAASU,QAAT,CAV2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBT,oBAAoB;AAAA;AAAA;AAAA,GAA1B;AAaP;;;;;AAEO,IAAMU,MAAM;AAAA,4FAAG,kBAAOrB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBAC6BF,GAAG,CAACsB,IADjC,EACZC,UADY,aACZA,UADY,EACAC,cADA,aACAA,cADA,EACgBC,QADhB,aACgBA,QADhB;AAGdC,YAAAA,IAHc,GAGPC,yBAAIC,MAAJ,CACX5B,GAAG,CAAC6B,OAAJ,CAAYF,GADD,EAEXG,MAAM,CAACC,IAAP,CAAYC,OAAO,CAACC,GAAR,CAAYC,mBAAxB,EAA6C,QAA7C,CAFW,CAHO;AAAA;AAAA,mBAQQrC,MAAM,CAACM,OAAP,CAAekB,MAAf,CAAsB;AAChDc,cAAAA,IAAI,EAAE;AACJZ,gBAAAA,UAAU,EAAVA,UADI;AAEJC,gBAAAA,cAAc,EAAdA,cAFI;AAGJC,gBAAAA,QAAQ,EAARA,QAHI;AAIJjB,gBAAAA,MAAM,EAAE;AAAE4B,kBAAAA,OAAO,EAAE;AAAE9B,oBAAAA,EAAE,EAAEoB,IAAI,CAACA,IAAL,CAAUpB;AAAhB;AAAX;AAJJ;AAD0C,aAAtB,CARR;;AAAA;AAQd+B,YAAAA,aARc;AAAA,8CAiBbpC,GAAG,CAACS,IAAJ,CAAS2B,aAAT,CAjBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANhB,MAAM;AAAA;AAAA;AAAA,GAAZ","sourcesContent":["import { PrismaClient } from '@prisma/client';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n/* GET */\r\n\r\nexport const getAllProjects = async (req, res, next) => {\r\n  const projectRecords = await prisma.project.findMany({\r\n    orderBy: { id: 'desc' },\r\n    include: { author: true }\r\n  });\r\n\r\n  return res.json(projectRecords);\r\n};\r\n\r\nexport const getChallengeProjects = async (req, res, next) => {\r\n  const { challengePath } = req.params;\r\n  console.log('challengePath:', challengePath)\r\n\r\n  const projects = await prisma.project.findMany({\r\n    where: { challenge: { path: challengePath }, deletedAt: null },\r\n    include: { author: true },\r\n    orderBy: { id: 'desc' }\r\n  });\r\n\r\n  return res.json(projects);\r\n};\r\n\r\n/* POST */\r\n\r\nexport const create = async (req, res, next) => {\r\n  const { githubLink, additionalLink, comments } = req.body;\r\n\r\n  const user = jwt.verify(\r\n    req.cookies.jwt,\r\n    Buffer.from(process.env.ACCESS_TOKEN_SECRET, 'base64')\r\n  );\r\n\r\n  const projectRecord = await prisma.project.create({\r\n    data: {\r\n      githubLink,\r\n      additionalLink,\r\n      comments,\r\n      author: { connect: { id: user.user.id } }\r\n    }\r\n  });\r\n\r\n  return res.json(projectRecord);\r\n};\r\n"],"file":"projectController.js"}
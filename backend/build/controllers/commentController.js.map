{"version":3,"sources":["../../src/controllers/commentController.js"],"names":["prisma","PrismaClient","getAllComments","req","res","next","comment","findMany","comments","json","getComment","commentId","params","findUnique","where","id","getQuestionComments","questionId","console","log","question","parseInt","deletedAt","include","author","orderBy","createdAt","create","body","user","jwt","verify","cookies","Buffer","from","process","env","ACCESS_TOKEN_SECRET","data","connect","commentRecord","deleteSoft","update","Date","toISOString","answerPromote","isAnswer","question_id","updatedComments","answerDemote"],"mappings":"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","sourcesContent":["import { PrismaClient } from '@prisma/client';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n/* GET */\r\n\r\nexport const getAllComments = async (req, res, next) => {\r\n  const comments = await prisma.comment.findMany({});\r\n\r\n  return res.json(comments);\r\n};\r\n\r\nexport const getComment = async (req, res, next) => {\r\n  const { commentId } = req.params;\r\n\r\n  const comment = await prisma.comment.findUnique({ where: { id: commentId } });\r\n\r\n  return res.json(comment);\r\n};\r\n\r\nexport const getQuestionComments = async (req, res, next) => {\r\n  const { questionId } = req.params;\r\n  console.log('questionId:', questionId)\r\n\r\n  const comments = await prisma.comment.findMany({\r\n    where: { question: { id: parseInt(questionId) }, deletedAt: null },\r\n    include: { author: true },\r\n    orderBy: { createdAt: 'asc' }\r\n  });\r\n\r\n  return res.json(comments);\r\n};\r\n\r\n/* POST */\r\n\r\nexport const create = async (req, res, next) => {\r\n  const { questionId, body } = req.body;\r\n\r\n  const user = jwt.verify(\r\n    req.cookies.jwt,\r\n    Buffer.from(process.env.ACCESS_TOKEN_SECRET, 'base64')\r\n  );\r\n\r\n  const commentRecord = await prisma.comment.create({\r\n    data: {\r\n      author: { connect: { id: user.user.id } },\r\n      question: { connect: { id: parseInt(questionId) } },\r\n      body\r\n    },\r\n    include: { author: true }\r\n  });\r\n\r\n  return res.json(commentRecord);\r\n};\r\n\r\nexport const deleteSoft = async (req, res, next) => {\r\n  const { commentId } = req.body;\r\n\r\n  const commentRecord = await prisma.comment.update({\r\n    where: { id: commentId },\r\n    data: { deletedAt: new Date().toISOString() }\r\n  });\r\n\r\n  return res.json(commentRecord);\r\n};\r\n\r\nexport const answerPromote = async (req, res, next) => {\r\n  const { commentId } = req.body;\r\n\r\n  const commentRecord = await prisma.comment.update({\r\n    where: { id: commentId },\r\n    data: { isAnswer: true }\r\n  });\r\n\r\n  const updatedComments = await prisma.comment.findMany({\r\n    where: {\r\n      question: { id: parseInt(commentRecord.question_id) },\r\n      deletedAt: null\r\n    },\r\n    include: { author: true }\r\n  });\r\n\r\n  return res.json(updatedComments);\r\n};\r\n\r\nexport const answerDemote = async (req, res, next) => {\r\n  const { commentId } = req.body;\r\n\r\n  const commentRecord = await prisma.comment.update({\r\n    where: { id: commentId },\r\n    data: { isAnswer: false }\r\n  });\r\n\r\n  const updatedComments = await prisma.comment.findMany({\r\n    where: {\r\n      question: { id: parseInt(commentRecord.question_id) },\r\n      deletedAt: null\r\n    },\r\n    include: { author: true }\r\n  });\r\n\r\n  return res.json(updatedComments);\r\n};\r\n\r\n/* PATCH */\r\n\r\nexport const update = async (req, res, next) => {\r\n  const { id, body } = req.body;\r\n\r\n  const commentRecord = await prisma.comment.update({\r\n    where: { id },\r\n    data: { body }\r\n  });\r\n\r\n  const updatedComments = await prisma.comment.findMany({\r\n    where: {\r\n      question: { id: parseInt(commentRecord.question_id) },\r\n      deletedAt: null\r\n    },\r\n    include: { author: true },\r\n    orderBy: { createdAt: 'asc' }\r\n  });\r\n\r\n  return res.json(updatedComments);\r\n};\r\n"],"file":"commentController.js"}
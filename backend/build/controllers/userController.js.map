{"version":3,"sources":["../../src/controllers/userController.js"],"names":["prisma","PrismaClient","getAllUsers","req","res","next","user","findMany","users","json","getCurrentUser","console","log","cookies","jwt","verify","Buffer","from","process","env","ACCESS_TOKEN_SECRET","findUnique","where","id","userRecord","status","error","userJWT","newJWT","authService","generateJWT","userClient","userClientCleaner","cookie","COOKIE_CONFIG","signup","body","username","email","password","userService","signupUserByEmail","createdUser","jwtData","userClientData","login","bcryptjs","compare","isCorrectPass","logout","clearCookie","generatePassReset","emailSentMessage","message","resetPassToken","crypto","randomBytes","toString","expiryDate","Date","now","resetPassTokenExpiry","toISOString","update","data","resetPasswordUrl","BASE_URL","emailHandler","sendEmailPasswordReset","resetPassword","newPassword","resetToken","tokenInvalidMessage","isTokenExpired","hash","hashedPassword","updatedUser","resetPasswordLogin"],"mappings":"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","sourcesContent":["import { PrismaClient } from '@prisma/client';\r\nimport crypto from 'crypto';\r\n// import argon2 from 'argon2';\r\nimport bcryptjs from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport * as authService from '../services/authService.js';\r\nimport * as userService from '../services/userService.js';\r\nimport * as emailHandler from '../handlers/emailHandler.js';\r\nimport { COOKIE_CONFIG, BASE_URL } from '../config.js';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport const getAllUsers = async (req, res, next) => {\r\n  const users = await prisma.user.findMany();\r\n\r\n  res.json(users);\r\n};\r\n\r\nexport const getCurrentUser = async (req, res) => {\r\n  console.log('req.cookies:', req.cookies);\r\n\r\n  if (!req || !req.cookies || !req.cookies.jwt) return res.json({});\r\n\r\n  const user = jwt.verify(\r\n    req.cookies.jwt,\r\n    Buffer.from(process.env.ACCESS_TOKEN_SECRET, 'base64')\r\n  );\r\n\r\n  try {\r\n    const userRecord = await prisma.user.findUnique({\r\n      where: { id: user.user.id }\r\n    });\r\n\r\n    if (!userRecord) return req.status(404).json({ error: 'user.notFound' });\r\n\r\n    const userJWT = { user: { id: userRecord.id } };\r\n\r\n    const newJWT = authService.generateJWT(userJWT);\r\n\r\n    const userClient = authService.userClientCleaner(userRecord);\r\n\r\n    res.cookie('jwt', newJWT, COOKIE_CONFIG);\r\n\r\n    return res.json(userClient);\r\n  } catch (error) {\r\n    return res.json({});\r\n  }\r\n};\r\n\r\nexport const signup = async (req, res) => {\r\n  const { username, email, password } = req.body;\r\n\r\n  const createdUser = await userService.signupUserByEmail(\r\n    res,\r\n    username,\r\n    email,\r\n    password\r\n  );\r\n\r\n  const jwtData = { user: { id: createdUser.id } };\r\n\r\n  const newJWT = authService.generateJWT(jwtData);\r\n\r\n  const userClientData = authService.userClientCleaner(createdUser);\r\n\r\n  res.cookie('jwt', newJWT, COOKIE_CONFIG);\r\n\r\n  return res.json(userClientData);\r\n};\r\n\r\nexport const login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password)\r\n    return res.status(401).json({ error: 'login.invalidCredentials' });\r\n\r\n  const userRecord = await prisma.user.findUnique({ where: { email } });\r\n\r\n  if (!userRecord)\r\n    return res.status(401).json({ error: 'login.invalidCredentials' });\r\n\r\n  // const isCorrectPass = await argon2.verify(userRecord.password, password);\r\n  const isCorrectPass = await bcryptjs.compare(password, userRecord.password);\r\n\r\n  if (!isCorrectPass)\r\n    return res.status(401).json({ error: 'login.invalidCredentials' });\r\n\r\n  const jwtData = { user: { id: userRecord.id } };\r\n\r\n  const newJWT = authService.generateJWT(jwtData);\r\n\r\n  const userClientData = authService.userClientCleaner(userRecord);\r\n\r\n  // const cookieOptions = {\r\n  //   httpOnly: true,\r\n  //   path: '/',\r\n  //   secure: process.env.NODE_ENV === 'production',\r\n  //   maxAge: 1000 * 60 * 60 * 24 * 7,\r\n  //   sameSite: 'strict'\r\n  // };\r\n\r\n  res.cookie('jwt', newJWT, COOKIE_CONFIG);\r\n\r\n  // res.cookie('jwt', newJWT, cookieOptions);\r\n\r\n  // res.cookie('name', 'isophy');\r\n\r\n  // res.cookie('name', 'value', {\r\n  //   maxAge: 1000 * 60 * 60 * 24 * 7,\r\n  //   httpOnly: false,\r\n  //   path: '/',\r\n  //   secure: false,\r\n  //   sameSite: 'none',\r\n  //   sameParty: false\r\n  // });\r\n\r\n  // res.setHeader('Set-Cookie', 'name=setHeader');\r\n\r\n  // res.append('Set-Cookie', 'name=append');\r\n\r\n  return res.json(userClientData);\r\n};\r\n\r\nexport const logout = async (req, res) => {\r\n  res.clearCookie('jwt');\r\n  res.clearCookie('state');\r\n\r\n  return res.json(true);\r\n};\r\n\r\nexport const generatePassReset = async (req, res) => {\r\n  const { email } = req.body;\r\n\r\n  // if can find email, begin reset flow\r\n  const userRecord = await prisma.user.findUnique({ where: { email } });\r\n\r\n  const emailSentMessage = 'An email has been sent to the specified address';\r\n\r\n  // don't tell them the user doesn't exist!!\r\n  if (!userRecord) return res.json({ message: emailSentMessage });\r\n\r\n  // generate token and expiry, set it on user row\r\n  const resetPassToken = crypto.randomBytes(25).toString('hex');\r\n  const expiryDate = Date.now() + 1000 * 60 * 60; // 1 hour\r\n  const resetPassTokenExpiry = new Date(expiryDate).toISOString();\r\n\r\n  await prisma.user.update({\r\n    where: { email: userRecord.email },\r\n    data: { resetPassToken, resetPassTokenExpiry }\r\n  });\r\n\r\n  // send email with reset password in a link\r\n  const resetPasswordUrl = `${BASE_URL}/reset-password?resetToken=${resetPassToken}`;\r\n\r\n  emailHandler.sendEmailPasswordReset(email, resetPasswordUrl);\r\n\r\n  return res.json({ message: emailSentMessage });\r\n};\r\n\r\nexport const resetPassword = async (req, res) => {\r\n  const { newPassword, resetToken } = req.body;\r\n\r\n  const userRecord = await prisma.user.findUnique({\r\n    where: {\r\n      resetPassToken: resetToken\r\n\r\n      // resetPassTokenExpiry: {\r\n      //   // if the expiration is after right now, it's valid\r\n      //   gt: Date.now()\r\n      // }\r\n    }\r\n  });\r\n\r\n  const tokenInvalidMessage =\r\n    'Reset token invalid. Try resetting your password again.';\r\n\r\n  if (!userRecord) return res.status(401).json({ error: tokenInvalidMessage });\r\n\r\n  const isTokenExpired = Date.now() > userRecord.resetPassTokenExpiry;\r\n\r\n  if (!userRecord || isTokenExpired)\r\n    return res.status(401).json({ error: tokenInvalidMessage });\r\n\r\n  // hash the password\r\n  // const hashedPassword = await argon2.hash(newPassword);\r\n  const hashedPassword = await bcryptjs.hash(newPassword);\r\n\r\n  // update the record\r\n  const updatedUser = await prisma.user.update({\r\n    where: { id: userRecord.id },\r\n\r\n    data: {\r\n      password: hashedPassword,\r\n      resetPassToken: null,\r\n      resetPassTokenExpiry: null\r\n    }\r\n  });\r\n\r\n  // log them back in\r\n  const [jwt, user] = await userService.resetPasswordLogin(\r\n    res,\r\n    updatedUser.email,\r\n    newPassword\r\n  );\r\n\r\n  res.cookie('jwt', jwt, COOKIE_CONFIG);\r\n\r\n  return res.json(user);\r\n};\r\n"],"file":"userController.js"}
{"version":3,"sources":["../../src/services/authService.js"],"names":["validateEmail","res","email","notString","status","json","error","isvalid","isEmail","validate","generateJWT","payload","secret","Buffer","from","process","env","ACCESS_TOKEN_SECRET","options","expiresIn","jwt","sign","getStateFromHeader","req","headers","cookies","state","userClientCleaner","user","id","username","role","hasDiscordLogin"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,KAAN,EAAgB;AAC3C,MAAMC,SAAS,GAAG,OAAOD,KAAP,KAAiB,QAAnC;AAEA,MAAIC,SAAJ,EAAe,OAAOF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAArB,CAAP;;AAEf,MAAMC,OAAO,GAAGC,oBAAQC,QAAR,CAAiBP,KAAjB,CAAhB;;AAEA,MAAI,CAACK,OAAL,EAAc,OAAON,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAArB,CAAP;AACf,CARM;;;;AAUA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAAAC,OAAO,EAAI;AACpC,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYC,OAAO,CAACC,GAAR,CAAYC,mBAAxB,EAA6C,QAA7C,CAAf;AACA,MAAMC,OAAO,GAAG;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAhB;AAEA,SAAOC,yBAAIC,IAAJ,CAASV,OAAT,EAAkBC,MAAlB,EAA0BM,OAA1B,CAAP;AACD,CALM,C,CAOP;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;;;;;AAEO,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,GAAG,EAAI;AACvC;AAEA,MAAIA,GAAG,IAAIA,GAAG,CAACC,OAAf,EAAwB,OAAOD,GAAG,CAACE,OAAJ,CAAYC,KAAnB;AACzB,CAJM;;;;AAMA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,IAAI;AAAA,SAAK;AACxCC,IAAAA,EAAE,EAAED,IAAI,CAACC,EAD+B;AAExCC,IAAAA,QAAQ,EAAEF,IAAI,CAACE,QAFyB;AAGxC5B,IAAAA,KAAK,EAAE0B,IAAI,CAAC1B,KAH4B;AAIxC6B,IAAAA,IAAI,EAAEH,IAAI,CAACG,IAJ6B;AAKxCC,IAAAA,eAAe,EAAEJ,IAAI,CAACI;AALkB,GAAL;AAAA,CAA9B","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport isEmail from 'isemail';\r\n\r\nexport const validateEmail = (res, email) => {\r\n  const notString = typeof email !== 'string';\r\n\r\n  if (notString) return res.status(401).json({ error: 'email.invalid' });\r\n\r\n  const isvalid = isEmail.validate(email);\r\n\r\n  if (!isvalid) return res.status(401).json({ error: 'email.invalid' });\r\n};\r\n\r\nexport const generateJWT = payload => {\r\n  const secret = Buffer.from(process.env.ACCESS_TOKEN_SECRET, 'base64');\r\n  const options = { expiresIn: '6h' };\r\n\r\n  return jwt.sign(payload, secret, options);\r\n};\r\n\r\n// export const getParameterByName = (name, url) => {\r\n//   const parsedName = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n\r\n//   const regex = new RegExp('[?&]' + parsedName + '(=([^&#]*)|&|#|$)');\r\n\r\n//   const results = regex.exec(url);\r\n\r\n//   if (!results) return null;\r\n\r\n//   if (!results[2]) return '';\r\n\r\n//   return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n// };\r\n\r\nexport const getStateFromHeader = req => {\r\n  // if (req && req.headers) return cookie.parse(req.headers.cookie).state;\r\n\r\n  if (req && req.headers) return req.cookies.state;\r\n};\r\n\r\nexport const userClientCleaner = user => ({\r\n  id: user.id,\r\n  username: user.username,\r\n  email: user.email,\r\n  role: user.role,\r\n  hasDiscordLogin: user.hasDiscordLogin\r\n});\r\n"],"file":"authService.js"}